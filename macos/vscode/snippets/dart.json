{
	// Place your snippets for dart here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"blocprovider": {
		"prefix": "skblocp",
		"body": [
			"BlocProvider.of<$1Bloc>(context).add($1Event.$2);",
		],
		"description": "bloc provider"
	},
	"blocbuilder": {
		"prefix": "skblocb",
		"body": [
			"BlocBuilder<$1Bloc,$1State>(builder:(context,snapshot){return $2;}),"
		],
		"description": "bloc builder"
	},
	"skfocus": {
		"prefix": "skfocus",
		"body": [
			"FocusScope.of(context).requestFocus(FocusNode());"
		],
		"description": "focus"
	},
	"skfreeze": {
		"prefix": "skfrz",
		"body": [
			"@immutable",
			"abstract class $1 with _$$1 { const factory User(String name, int age) = _$1;",
			" }"
		],
		"description": "focus"
	},
	"sktextthemestyle": {
		"prefix": "sktextthemestyle",
		"body": [
			"style: Theme.of(context).textTheme.$1"
		],
		"description": "focus"
	},
	"sktextstyle": {
		"prefix": "sktextstyle",
		"body": [
			"style: TextStyle(fontSize: $1, color: $2, fontWeight: FontWeight.$3),"
		],
		"description": "focus"
	},
	"skcolor": {
		"prefix": "skthemecolor",
		"body": [
			"style: Theme.of(context).$1",
		],
		"description": "focus"
	},
	"sknavigate": {
		"prefix": "sknavpushnamed",
		"body": [
			"Navigator.of(context).pushNamed($1);"
		],
		"description": "focus"
	},
	"sknavigatereplacement": {
		"prefix": "sknavpushreplacementnamed",
		"body": [
			"Navigator.of(context).pushReplacementNamed($1);"
		],
		"description": "focus"
	},
	"sknavigatepop": {
		"prefix": "sknavpop",
		"body": [
			"Navigator.of(context).pop();"
		],
		"description": "focus"
	},
	"skfloatingext": {
		"prefix": "skfloatingext",
		"body": [
			"FloatingActionButton.extended(icon: Icon(Icons.qr_code$2), onPressed: () {$3}, label: Text('QR Code$1'),),"
		],
		"description": "focus"
	},
	"skstaticroute": {
		"prefix": "skstaticroute",
		"body": [
			"static const String route = '/$1';",
		],
		"description": "focus"
	},
	"skheight": {
		"prefix": "skheight",
		"body": [
			"height:MediaQuery.of(context).size.height,"
		],
		"description": "focus"
	},
	"skwidth": {
		"prefix": "skwidth",
		"body": [
			"width:MediaQuery.of(context).size.width,"
		],
		"description": "focus"
	},
	"skcolumn": {
		"prefix": "skcol",
		"body": [
			"Column(mainAxisSize:MainAxisSize.max,crossAxisAlignment:CrossAxisAlignment.center,mainAxisAlignment:MainAxisAlignment.center,children:[],),"
		],
		"description": "focus"
	},
	"skrow": {
		"prefix": "skrow",
		"body": [
			"Row(mainAxisSize:MainAxisSize.max,crossAxisAlignment:CrossAxisAlignment.center,mainAxisAlignment:MainAxisAlignment.center,children:[],),"
		],
		"description": "focus"
	},
	"skboxdecoration": {
		"prefix": "skboxdecoration",
		"body": [
			"decoration:BoxDecoration(borderRadius:BorderRadius.all(Radius.circular(10)),color:Colors.grey,border:Border.all(color:Colors.green),),"
		],
		"description": "focus"
	},
	"skdivider": {
		"prefix": "skdivider",
		"body": [
			"Divider(),$1"
		],
		"description": "focus"
	},
	"skexpanded": {
		"prefix": "skexpanded",
		"body": [
			"Expanded(flex: 1, child: Container()),"
		],
		"description": "expanded"
	},
	"sksvgimage": {
		"prefix": "sksvgimage",
		"body": [
			"SvgPicture.asset($1),"
		],
		"description": "sksvgimage"
	},
	"sksh": {
		"prefix": "sksh",
		"body": [
			"SizedBox(height:$1),"
		],
		"description": "sksh"
	},
	"sksw": {
		"prefix": "sksw",
		"body": [
			"SizedBox(width:$1),"
		],
		"description": "sksw"
	},
	"sksz": {
		"prefix": "sksz",
		"body": [
			"SizedBox(height:$1,width:$2),"
		],
		"description": "sksz"
	},
	"skstreambuilderprefix": {
		"prefix": "skstrmbld",
		"body": [
			"StreamBuilder(builder:(context,snapshot)=>$1),"
		],
		"description": "sksvgimage"
	},
	"sksvg": {
		"prefix": "skscsvg",
		"body": [
			"static const $1 = 'assets/svg/$1.svg';"
		],
		"description": "skscsvg"
	},
	"skclipr": {
		"prefix": "skclipr",
		"body": [
			"ClipRRect(borderRadius:BorderRadius.only(topRight:Radius.circular(5),topLeft:Radius.circular(5),),child:Container(),),"
		],
		"description": "skclipr"
	},
	"sktostate": {
		"prefix": "sktostate",
		"body": [
			"Stream<$2State>_$1ToState(_$1 event)async*{}"
		],
		"description": "sktostate"
	},
	"skmapevent": {
		"prefix": "skmapevent",
		"body": [
			"$1:(event)=>_$1ToState(event),"
		],
		"description": "sktostate"
	},
	"skfreezedserialilzable": {
		"prefix": "skfreezedserialilzable",
		"body": [
			"factoryModel.fromJson(Map<String,dynamic>json)=>_$ModelFromJson(json);"
		],
		"description": "sktostate"
	},
	"skprovider": {
		"prefix": "skprovider",
		"body": [
			"var provider = locator.get<SkProvider>();"
		],
		"description": "skloc"
	},
	"sksharedpref": {
		"prefix": "sksharedpref",
		"body": [
			"var prefs = await SharedPreferences.getInstance();\n"
		],
		"description": "sksharedpref"
	},
	"skimporteasylocalization": {
		"prefix": "skimporteasylocalization",
		"body": [
			"import 'package:easy_localization/easy_localization.dart';\n"
		],
		"description": "skimporteasylocalization"
	},
	"skimmath": {
		"prefix": "skimmath",
		"body": [
			"import 'dart:math' as math;"
		],
		"description": "skimmath"
	},
	"skfuturedelayed": {
		"prefix": "skfuturedelayed",
		"body": [
			"await Future.delayed(const Duration(milliseconds: $1));\n"
		],
		"description": "skimmath"
	},
	"skfreezedjson": {
		"prefix": "skfreezedjson",
		"body": [
			"factory $1Model.fromJson(Map<String, dynamic> json) => _$$1ModelFromJson(json);"
		],
		"description": "skfreezedjson"
	},
	"skcachednetworkimage": {
		"prefix": "skcachednetworkimage",
		"body": [
			"CachedNetworkImage(imageUrl:$1,placeholder:(context,url)=>Center(child:CircularProgressIndicator()),errorWidget:(context,url,error)=>Icon(Icons.error),),"
		],
		"description": "skcachednetworkimage"
	},
	"skfreezedmodel": {
		"prefix": "skfreezedmodel",
		"body": [
			"@freezed class FollowOrganizationOutModel with _$FollowOrganizationOutModel { const FollowOrganizationOutModel._(); factory FollowOrganizationOutModel({ bool? following, }) = _FollowOrganizationOutModel; factory FollowOrganizationOutModel.fromJson(Map<String, dynamic> json) => _$FollowOrganizationOutModel(json); }"
		],
		"description": "skfreezedmodel"
	},
	"skinmodel": {
		"prefix": "skinmodel",
		"body": [
			"@freezed class $1IngModel with _$$1IngModel { const $1IngModel._(); factory $1IngModel({ bool? following, }) = _$1IngModel; factory $1IngModel.fromJson(Map<String, dynamic> json) => _$$1IngModel(json); }"
		],
		"description": "skfreezedmodel"
	},
	"skoutmodel": {
		"prefix": "skoutmodel",
		"body": [
			"@freezed class $1OutgModel with _$$1OutgModel { const $1OutgModel._(); factory $1OutgModel({ bool? following, }) = _$1OutgModel; factory $1OutgModel.fromJson(Map<String, dynamic> json) => _$$1OutgModel(json); }"
		],
		"description": "skfreezedmodel"
	},
	"skloc": {
		"prefix": "skloc",
		"body": [
			"locator.get<$1>().$2"
		],
		"description": "skloc"
	},
	"sklocparty": {
		"prefix": "sklocparty",
		"body": [
			"locator.get<Party>().$1"
		],
		"description": "sklocparty"
	},
	// import 'dart:math' as math;
	// var prefs = await SharedPreferences.getInstance();
	// factory Model.fromJson(Map<String, dynamic> json) => _$ModelFromJson(json);
	// scanPressed: (event) => _scanPressedToState(event),
	// sktostate
	// Stream<QrState> _backPressedToState(_backPressed event) async* {}
}
// locator.get<SkProvider>().
// factory ProfileModel.fromJson(Map<String, dynamic> json) => _$ProfileModelFromJson(json);
// CachedNetworkImage(imageUrl:$1,placeholder:(context,url)=>CircularProgressIndicator(),errorWidget:(context,url,error)=>Icon(Icons.error),),